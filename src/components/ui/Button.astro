---
interface Props {
  variant?: 'primary' | 'secondary' | 'outline' | 'ghost';
  size?: 'sm' | 'md' | 'lg';
  href?: string;
  target?: string;
  class?: string;
  type?: 'button' | 'submit' | 'reset';
}

const { 
  variant = 'primary', 
  size = 'md', 
  href, 
  target,
  class: className = '',
  type = 'button',
  ...props 
} = Astro.props;

const baseClasses = 'inline-flex items-center justify-center font-medium rounded-lg transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-offset-2 touch-manipulation';

const variants = {
  primary: 'bg-primary-500 hover:bg-primary-600 text-white focus:ring-primary-500 shadow-lg hover:shadow-xl active:scale-95',
  secondary: 'bg-primary-50 hover:bg-primary-100 text-primary-700 focus:ring-primary-500 active:scale-95',
  outline: 'border-2 border-primary-500 text-primary-600 hover:bg-primary-500 hover:text-white focus:ring-primary-500 active:scale-95',
  ghost: 'text-primary-600 hover:bg-primary-50 focus:ring-primary-500 active:scale-95'
};

const sizes = {
  sm: 'px-4 py-2 text-sm min-h-[36px]',
  md: 'px-6 py-3 text-base min-h-[44px]',
  lg: 'px-8 py-4 text-lg min-h-[48px]'
};

const classes = `${baseClasses} ${variants[variant]} ${sizes[size]} ${className}`;
const Element = href ? 'a' : 'button';
---

<Element 
  class={classes}
  href={href}
  target={target}
  type={href ? undefined : type}
  {...props}
>
  <slot />
</Element>